cmake_minimum_required(VERSION 2.8.9)

# ---[ Configurations types
#set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "Possible configurations" FORCE)
#if (DEFINED CMAKE_BUILD_TYPE)
#  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${CMAKE_CONFIGURATION_TYPES})
#endif()

# ---[ Solution name
project(kinfuMultiCam CXX)
set(CMAKE_CXX_FLAGS   "${CMAKE_CXX_FLAGS} -std=c++11")
set(CMAKE_CXX_FLAGS   "${CMAKE_CXX_FLAGS} -march=native")

set(CMAKE_CXX_FLAGS   "${CMAKE_CXX_FLAGS} -g")
#set(CMAKE_CXX_FLAGS   "${CMAKE_CXX_FLAGS} -fpermissive")
find_package(OpenCV  REQUIRED )
find_package(CUDA  REQUIRED)

option(WITH_CUDA "adds cuda support for freenect2" ON)
if(${WITH_CUDA})
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITH_CUDA")
endif()

option(WITH_PCL "adds pcl cloud support" ON)
if(${WITH_PCL})
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITH_PCL")
	find_package(PCL REQUIRED)
	link_directories(${PCL_LIBRARY_DIRS})
	add_definitions(${PCL_DEFINITIONS})
	include_directories(${PCL_INCLUDE_DIRS})
endif()

list(APPEND CUDA_NVCC_FLAGS "-gencode;arch=compute_20,code=sm_20;-gencode;arch=compute_20,code=sm_21;-gencode;arch=compute_30,code=sm_30;-gencode;arch=compute_35,code=sm_35;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_61,code=sm_61")

if(UNIX OR APPLE)
  list(APPEND CUDA_NVCC_FLAGS "-Xcompiler;-fPIC;")
endif()

add_subdirectory(kinfu)
add_subdirectory(apps)
